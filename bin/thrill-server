#!/usr/bin/env node

var app = require('commander'),
	path = require('path'),
	vm = require('vm'),
	fs = require('fs');

var startThrill = function(config){
	var createThrill = require('../').thrill.create,
		createThrillServer = require('../').thrillServer.create,
		createMinionMaster = require('minion-master').minionMaster.create,
		createReporter = require('../server/lib/reporter/unifiedDot.js').create,
		httpServer,
		winston,
		logger;

	if(config.log){
		winston = require("winston");
		logger = new (winston.Logger)({transports: [new (winston.transports.Console)({level: config.logLevel}) ]});
	}

	var httpServer = require('http').createServer().listen(80, 'localhost');
	var thrillServer = createThrillServer({ httpServer: httpServer, logger: logger });

	var minionMaster = createMinionMaster({
		httpServer: httpServer,
		logger:logger
	});

	var thrill = createThrill(minionMaster, { logger: logger });

	thrillServer.on('runRequest', function(data, callback){
		var workerConfig = data.workerConfig,
			options = data.options,
			testManager = thrill.getTestManager(workerConfig, options),
			reporter = createReporter(testManager);
		
		reporter.on('results', function(data){
			callback({
				passed: testManager.passed(),
				testerData: data
			});
		});

		testManager.start();
	});
};

app.version('0.0.1')
	.option('-c, --config', "Use configuration file")
	

app.command("*").action(function(configFilePath){
	var config = {};
	try {
		vm.runInNewContext(fs.readFileSync(configFilePath), config);
		startThrill(config);
	} catch(e) {
		if (e.name === 'SyntaxError') {
		  console.error('Syntax error in config file!\n' + e.message);
		} else if (e.code === 'ENOENT' || e.code === 'EISDIR') {
		  console.error('Config file does not exist!');
		} else {
		  console.error('Invalid config file!\n', e);
		}

		process.exit(1);
	}
});

app.parse(process.argv);
