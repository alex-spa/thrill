#!/usr/bin/env node

var app = require('commander'),
	path = require('path'),
	vm = require('vm'),
	fs = require('fs');

var startThrill = function(config){
	var createThrill = require('../').thrill.create,
		createThrillServer = require('../').thrillServer.create,
		createBullhorn = require('bullhorn').bullhorn.create,
		createMinionMaster = require('minion-master').minionMaster.create,
		createReporter = require('../server/lib/reporters/simpleConsole.js').create,
		httpServer,
		winston,
		logger;

	if(config.log){
		winston = require("winston");
		logger = new (winston.Logger)({transports: [new (winston.transports.Console)({level: config.logLevel}) ]});
	}


	var thrill = createThrill({ logger: logger });

	thrill.on("newTestManager", function(testManager){
		createReporter(testManager);
	});

	var httpServer = require('http').createServer().listen(80);

	var thrillServer = createThrillServer(thrill, { 
		httpServer: httpServer, 
		logger: logger
	});

	var minionMaster = createMinionMaster({
		httpServer: httpServer,
		logger:logger
	});
	var bullhorn = createBullhorn({	logger:logger });
	bullhorn.attachClientHub(minionMaster);
	thrill.attachWorkforceProvider(bullhorn);
};

app.version('0.0.1')
	.option('-c, --config', "Use configuration file")
	

app.command("*").action(function(configFilePath){
	var config = {};
	try {
		vm.runInNewContext(fs.readFileSync(configFilePath), config);
		startThrill(config);
	} catch(e) {
		if (e.name === 'SyntaxError') {
		  console.error('Syntax error in config file!\n' + e.message);
		} else if (e.code === 'ENOENT' || e.code === 'EISDIR') {
		  console.error('Config file does not exist!');
		} else {
		  console.error('Invalid config file!\n', e);
		}

		process.exit(1);
	}
});

app.parse(process.argv);
